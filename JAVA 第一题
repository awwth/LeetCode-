给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

题解：
class Solution{
  public int[] towSum(int[] nums,int target)     ////int[] 是指定义一个整型的一维数组 这里是定义nums[]
  {
    for(i=0;i<nums.length;i++)
    {
      for(int j=i+1;j<nums.length;j++)
        {
          if(target==nums[i]+nums[j])
          { 
            return new int[] {i,j}
          }
         }
     }
     throw new IllegalArgumentException("No two sum solution");
  }
}
这里是暴力解法  没有什么技巧 只是遍历整个数组 查看是否存在一个值与target-x相等的目标元素
时间复杂度O(n*n)    对于每个元素我们试图遍历数组的其余部分来寻找它所对应的目标元素 耗费O(n)的时间。因此时间复杂度为O(n*n)
空间复杂度 O(1)。
