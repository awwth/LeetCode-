给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

    左括号必须用相同类型的右括号闭合。
    左括号必须以正确的顺序闭合。

注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true

示例 2:

输入: "()[]{}"
输出: true

示例 3:

输入: "(]"
输出: false

示例 4:

输入: "([)]"
输出: false

示例 5:

输入: "{[]}"
输出: true

在表示问题的递归结构时，栈数据结构可以派上用场。我们无法真正地从内到外处理这个问题，因为我们对整体结构一无所知。
但是，栈可以帮助我们递归地处理这种情况，即从外部到内部。
算法

    初始化栈 S。
    一次处理表达式的每个括号。
    如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。
    如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。
    如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。
    
    
    class Solution {

  // 使用哈希表
  private HashMap<Character, Character> mappings;

  // 初始化哈希表
  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {

    // 使用栈
    Stack<Character> stack = new Stack<Character>();

    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);

      // 如果当前字符是右括号 
      if (this.mappings.containsKey(c)) {

        // 获取堆栈的顶部元素。如果堆栈为空，则设置一个虚拟值 '#'
        char topElement = stack.empty() ? '#' : stack.pop();

        //  如果此括号的映射与堆栈的top元素不匹配，则返回false。 
        if (topElement != this.mappings.get(c)) {
          return false;
        }
      } else {
        // 如果这是一个左括号，则将其入栈
        stack.push(c);
      }
    }

    //  如果堆栈仍然包含元素，则它是无效的表达式。 
    return stack.isEmpty();
  }
}
