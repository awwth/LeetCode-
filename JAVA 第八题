给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：

输入: "cbbd"
输出: "bb"



class Solution {
    public String longestPalindrome(String s) {
        //先将特殊情况讨论
        
        if(s.size()==0)
        {return "";}
        if(s.size()==1)
        {return s;}
        if(s.size()==2)
        {
            if(s[0]==s[1])
            {return s;}
            else {
                return s.substr(0,1);
            }
        }
        //正常情况
        // 创建动态规划表格matrix
		// matrix[left][right]表示下标从left到right的子串（以下简写为s[left, right]）是否是回文的
		// 若是，则值为其长度；否则，值为0
		// matrix所有元素初始化为0
        string result="";
        vector<vector<int>> mairix;
        for(int i_row=0;i_row<s.size();i_row++)
        {
        vector<int>row;
            for(int i_col=0;i_col<s.size();i_col++)
            {
                row.push_back(0);
            }
            matrix.push_back(row);
        }
       // 用left表示当前子串起始下标，right表示当前子串结束下标。left <= right。
		// 基本情形：
		// 1. left == right，此时子串只有一个字符，一定是回文的，且长度为1
		// 2. left == right - 1，此时子串有两个字符，当且仅当两个字符相同，子串是回文的，且长度为2
		for (int i_1 = 0; i_1 < s.size(); i_1++) {
			matrix[i_1][i_1] = 1;
		}
		result = s[0]; // 最大长度为1的结果

		for (int i_2 = 0; i_2 < s.size() - 1; i_2++) {
			if (s[i_2] == s[i_2 + 1]) {
				matrix[i_2][i_2 + 1] = 2;
				if (result.size() < 2) { // 最大长度为2的结果
					result = s.substr(i_2, 2);
				}
			}
		}

		// 迭代：从长度为3的子串开始
		// 当且仅当s[left] == s[right]，且s[left + 1, right - 1]是回文的，s[left, right]是回文的
		// 换言之，若s[left] == s[right]，且s[left + 1][right - 1] > 0，则s[left, right] = s[left + 1, right - 1] + 2
		// 注意要按列而不是按行遍历！
		// 原因是，在表格中，s[left + 1][right - 1]是在s[left][right]的右下角
		// 只有按列遍历，才能保证在计算s[left][right]前，s[left + 1][right - 1]已经被计算过
		for (int right = 2; right < s.size(); right++) {
			for (int left = 0; left <= right - 2; left++) {
				if (s[left] == s[right] && matrix[left + 1][right - 1] > 0) {
					int cur_length = matrix[left + 1][right - 1] + 2; //回文子串长度增加2
					matrix[left][right] = cur_length;

					// 最大长度为cur_length的结果
					if (result.size() < cur_length) {
						result = s.substr(left, right - left + 1);
					}
				}
				/*
				如果不是回文，则matrix[left][right]应设置为0。由于初始化时已设置过，这里便不再设置
				else{
					matrix[left][right] = 0;
				}
				*/
			}
		}
		return result;
	}
};
