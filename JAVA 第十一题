给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。

示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

说明:

为什么返回数值是整数，但输出的答案是数组呢?

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}


思路：
比如[1,1,2,3,3,4]
设置两个指针，一个指针i用来从头到尾的循环数字  在不断的循环中用nums[i]和nums[i+1]对比 如果相等就继续向后推进i 
当出现nums[i]不等于nums[i+1]的情况时  将这个与前面不相同的nums[i+1]  移到指针pos的位置 同时pos加1    
指针pos 是用来指示位置的   pos初始位置为1  在数组中就是第2个数字  将与数组中第1个数字（nums[0]）不同的移到nums[pos] 即nums[1]上去 
依次向后 不断将不相同的数字 依次放入nums[1] nums[2] nums[3]中。

class Solution {
	public int removeDuplicates(int[] nums) {
		int pos = 1;
		int i = 0;
		while (i < nums.length - 1) {
			if (nums[i] != nums[i + 1]) {
				nums[pos] = nums[i + 1];
				pos++;
			}
			i++;
		}
		return pos;
	}
}
